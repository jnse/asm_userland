30000 iterations: 

---------------------------------------
- Baseline malloc test (glibc malloc) -
---------------------------------------
This is plain glibc malloc in C

real	0m0.005s
user	0m0.003s
sys	0m0.001s


---------------------------------------
- asm_userland malloc (basic K&R)     -
---------------------------------------
This is using a plain, slow linear search for free blocks.

real	1m0.332s
user	1m0.326s
sys	0m0.005s

------------------------------------------
- asm_userland malloc (added free cache) -
------------------------------------------
Same as above, but with keeping a cache to the last freed block,
allowing instant block re-use if last freed block is the same size.

real	0m20.177s
user	0m20.166s
sys	0m0.009s

--------------------------------------------
- asm_userland malloc (added free counter) -
--------------------------------------------
Same as above, but added a free block counter, and skip
looking for free blocks if there are none.

real	0m6.653s
user	0m6.642s
sys	0m0.011s


After implementing a lifo mechanism, the asm version of malloc is now fast enough
for it to appear faster than glibc malloc only because the executable size is smaller
(and thus the overhead for loading the elf executable is less).
For this reason, future benchmark have upped the number of iterations by an order of 
magnitude.


3000000 iterations:

---------------------------------------
- Baseline malloc test (glibc malloc) -
---------------------------------------
real	0m0.040s
user	0m0.027s
sys	0m0.012s

---------------------------------------
- asm_userland malloc                 -
---------------------------------------
real	0m0.045s
user	0m0.023s
sys	0m0.023s

